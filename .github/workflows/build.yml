name: Build

on:
  push:
    tags:
      - 'v*'
#  pull_request:
#    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  ci:
    uses: ./.github/workflows/ci.yml

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: ci
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download
      
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        BINARY_NAME="terraform-provider-kind"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -o ${BINARY_NAME} \
          -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/}" \
          .
          
        # Create archive
        ARCHIVE_NAME="terraform-provider-kind_${GITHUB_REF#refs/tags/}_${GOOS}_${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          zip -q "${ARCHIVE_NAME}.zip" ${BINARY_NAME}
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" -C . ${BINARY_NAME}
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-provider-kind-${{ matrix.goos }}-${{ matrix.goarch }}
        path: terraform-provider-kind*
        
  typescript-sdk:
    name: Build TypeScript SDK
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.6'
        
    - name: Install CDKTF CLI
      run: npm install -g cdktf-cli@latest
        
    - name: Build TypeScript SDK
      run: make build-ts-sdk
      env:
        NODE_NO_WARNINGS: 1

  python-sdk:
    name: Build Python SDK
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.6'
        
    - name: Install CDKTF CLI
      run: npm install -g cdktf-cli@latest
      
    - name: Build Python SDK
      run: make build-python-sdk
      env:
        NODE_NO_WARNINGS: 1
      

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, typescript-sdk, python-sdk]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/terraform-provider-kind*.zip
          **/terraform-provider-kind*.tar.gz
          **/terraform-provider-kind*.zip.asc
          **/terraform-provider-kind*.tar.gz.asc
          terraform-provider-kind_SHA256SUMS*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}